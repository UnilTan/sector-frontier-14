using Content.Client.UserInterface.Controls;
using Content.Shared.Cargo;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Content.Shared._NF.Bank; // Frontier

namespace Content.Client.Cargo.UI;

[GenerateTypedNameReferences]
public sealed partial class CargoPalletMenu : FancyWindow
{
    public Action? SellRequested;
    public Action? AppraiseRequested;

    public CargoPalletMenu()
    {
        RobustXamlLoader.Load(this);
        SellButton.OnPressed += OnSellPressed;
        AppraiseButton.OnPressed += OnAppraisePressed;
    }

    public void SetAppraisal(int amount)
    {
        AppraisalLabel.Text = BankSystemExtensions.ToSpesoString(amount); // Suffixed to avoid BUI collisions (see RT#5648)
    }

    // Lua start
    // Устанавливает реальную выплату после налогов и динамического мультипликатора.
    public void SetReal(int amount)
    {
        RealLabel.Text = BankSystemExtensions.ToSpesoString(amount);
    }
    // Lua end

    public void SetCount(int count)
    {
        CountLabel.Text = count.ToString();
    }

    // Lua start
    // Устанавливает краткое описание общего снижения цены (например, "-17%").
    public void SetReductionText(string text)
    {
        ReductionLabel.Text = text;
    }
    // Lue end

    public void SetEnabled(bool enabled)
    {
        AppraiseButton.Disabled = !enabled;
        SellButton.Disabled = !enabled;
    }

    // Lua start
    public void SetMinimalUi(bool minimal)
    {
        RealRow.Visible = !minimal;
        ReductionRow.Visible = !minimal;
    }
    // Lua end

    private void OnSellPressed(BaseButton.ButtonEventArgs obj)
    {
        SellRequested?.Invoke();
    }

    private void OnAppraisePressed(BaseButton.ButtonEventArgs obj)
    {
        AppraiseRequested?.Invoke();
    }
}
